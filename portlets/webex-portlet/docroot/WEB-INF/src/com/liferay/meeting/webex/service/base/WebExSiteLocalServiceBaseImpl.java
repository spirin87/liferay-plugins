/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.meeting.webex.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.service.persistence.ExpandoValuePersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.meeting.webex.model.WebExSite;
import com.liferay.meeting.webex.service.WebExSiteLocalService;
import com.liferay.meeting.webex.service.persistence.WebExAccountPersistence;
import com.liferay.meeting.webex.service.persistence.WebExSitePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the web ex site local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.meeting.webex.service.impl.WebExSiteLocalServiceImpl}.
 * </p>
 *
 * @author Anant Singh
 * @see com.liferay.meeting.webex.service.impl.WebExSiteLocalServiceImpl
 * @see com.liferay.meeting.webex.service.WebExSiteLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class WebExSiteLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements WebExSiteLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.meeting.webex.service.WebExSiteLocalServiceUtil} to access the web ex site local service.
	 */

	/**
	 * Adds the web ex site to the database. Also notifies the appropriate model listeners.
	 *
	 * @param webExSite the web ex site
	 * @return the web ex site that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WebExSite addWebExSite(WebExSite webExSite) {
		webExSite.setNew(true);

		return webExSitePersistence.update(webExSite);
	}

	/**
	 * Creates a new web ex site with the primary key. Does not add the web ex site to the database.
	 *
	 * @param webExSiteId the primary key for the new web ex site
	 * @return the new web ex site
	 */
	@Override
	public WebExSite createWebExSite(long webExSiteId) {
		return webExSitePersistence.create(webExSiteId);
	}

	/**
	 * Deletes the web ex site with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param webExSiteId the primary key of the web ex site
	 * @return the web ex site that was removed
	 * @throws PortalException if a web ex site with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WebExSite deleteWebExSite(long webExSiteId)
		throws PortalException {
		return webExSitePersistence.remove(webExSiteId);
	}

	/**
	 * Deletes the web ex site from the database. Also notifies the appropriate model listeners.
	 *
	 * @param webExSite the web ex site
	 * @return the web ex site that was removed
	 * @throws PortalException
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WebExSite deleteWebExSite(WebExSite webExSite)
		throws PortalException {
		return webExSitePersistence.remove(webExSite);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WebExSite.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return webExSitePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.meeting.webex.model.impl.WebExSiteModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return webExSitePersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.meeting.webex.model.impl.WebExSiteModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return webExSitePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return webExSitePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return webExSitePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public WebExSite fetchWebExSite(long webExSiteId) {
		return webExSitePersistence.fetchByPrimaryKey(webExSiteId);
	}

	/**
	 * Returns the web ex site matching the UUID and group.
	 *
	 * @param uuid the web ex site's UUID
	 * @param groupId the primary key of the group
	 * @return the matching web ex site, or <code>null</code> if a matching web ex site could not be found
	 */
	@Override
	public WebExSite fetchWebExSiteByUuidAndGroupId(String uuid, long groupId) {
		return webExSitePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the web ex site with the primary key.
	 *
	 * @param webExSiteId the primary key of the web ex site
	 * @return the web ex site
	 * @throws PortalException if a web ex site with the primary key could not be found
	 */
	@Override
	public WebExSite getWebExSite(long webExSiteId) throws PortalException {
		return webExSitePersistence.findByPrimaryKey(webExSiteId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(webExSiteLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WebExSite.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("webExSiteId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(webExSiteLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(WebExSite.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("webExSiteId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(webExSiteLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WebExSite.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("webExSiteId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<WebExSite>() {
				@Override
				public void performAction(WebExSite webExSite)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						webExSite);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(WebExSite.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return webExSiteLocalService.deleteWebExSite((WebExSite)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return webExSitePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the web ex sites matching the UUID and company.
	 *
	 * @param uuid the UUID of the web ex sites
	 * @param companyId the primary key of the company
	 * @return the matching web ex sites, or an empty list if no matches were found
	 */
	@Override
	public List<WebExSite> getWebExSitesByUuidAndCompanyId(String uuid,
		long companyId) {
		return webExSitePersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of web ex sites matching the UUID and company.
	 *
	 * @param uuid the UUID of the web ex sites
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of web ex sites
	 * @param end the upper bound of the range of web ex sites (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching web ex sites, or an empty list if no matches were found
	 */
	@Override
	public List<WebExSite> getWebExSitesByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<WebExSite> orderByComparator) {
		return webExSitePersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the web ex site matching the UUID and group.
	 *
	 * @param uuid the web ex site's UUID
	 * @param groupId the primary key of the group
	 * @return the matching web ex site
	 * @throws PortalException if a matching web ex site could not be found
	 */
	@Override
	public WebExSite getWebExSiteByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return webExSitePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the web ex sites.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.meeting.webex.model.impl.WebExSiteModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of web ex sites
	 * @param end the upper bound of the range of web ex sites (not inclusive)
	 * @return the range of web ex sites
	 */
	@Override
	public List<WebExSite> getWebExSites(int start, int end) {
		return webExSitePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of web ex sites.
	 *
	 * @return the number of web ex sites
	 */
	@Override
	public int getWebExSitesCount() {
		return webExSitePersistence.countAll();
	}

	/**
	 * Updates the web ex site in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param webExSite the web ex site
	 * @return the web ex site that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WebExSite updateWebExSite(WebExSite webExSite) {
		return webExSitePersistence.update(webExSite);
	}

	/**
	 * Returns the web ex account local service.
	 *
	 * @return the web ex account local service
	 */
	public com.liferay.meeting.webex.service.WebExAccountLocalService getWebExAccountLocalService() {
		return webExAccountLocalService;
	}

	/**
	 * Sets the web ex account local service.
	 *
	 * @param webExAccountLocalService the web ex account local service
	 */
	public void setWebExAccountLocalService(
		com.liferay.meeting.webex.service.WebExAccountLocalService webExAccountLocalService) {
		this.webExAccountLocalService = webExAccountLocalService;
	}

	/**
	 * Returns the web ex account persistence.
	 *
	 * @return the web ex account persistence
	 */
	public WebExAccountPersistence getWebExAccountPersistence() {
		return webExAccountPersistence;
	}

	/**
	 * Sets the web ex account persistence.
	 *
	 * @param webExAccountPersistence the web ex account persistence
	 */
	public void setWebExAccountPersistence(
		WebExAccountPersistence webExAccountPersistence) {
		this.webExAccountPersistence = webExAccountPersistence;
	}

	/**
	 * Returns the web ex site local service.
	 *
	 * @return the web ex site local service
	 */
	public WebExSiteLocalService getWebExSiteLocalService() {
		return webExSiteLocalService;
	}

	/**
	 * Sets the web ex site local service.
	 *
	 * @param webExSiteLocalService the web ex site local service
	 */
	public void setWebExSiteLocalService(
		WebExSiteLocalService webExSiteLocalService) {
		this.webExSiteLocalService = webExSiteLocalService;
	}

	/**
	 * Returns the web ex site persistence.
	 *
	 * @return the web ex site persistence
	 */
	public WebExSitePersistence getWebExSitePersistence() {
		return webExSitePersistence;
	}

	/**
	 * Sets the web ex site persistence.
	 *
	 * @param webExSitePersistence the web ex site persistence
	 */
	public void setWebExSitePersistence(
		WebExSitePersistence webExSitePersistence) {
		this.webExSitePersistence = webExSitePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the expando value local service.
	 *
	 * @return the expando value local service
	 */
	public com.liferay.expando.kernel.service.ExpandoValueLocalService getExpandoValueLocalService() {
		return expandoValueLocalService;
	}

	/**
	 * Sets the expando value local service.
	 *
	 * @param expandoValueLocalService the expando value local service
	 */
	public void setExpandoValueLocalService(
		com.liferay.expando.kernel.service.ExpandoValueLocalService expandoValueLocalService) {
		this.expandoValueLocalService = expandoValueLocalService;
	}

	/**
	 * Returns the expando value persistence.
	 *
	 * @return the expando value persistence
	 */
	public ExpandoValuePersistence getExpandoValuePersistence() {
		return expandoValuePersistence;
	}

	/**
	 * Sets the expando value persistence.
	 *
	 * @param expandoValuePersistence the expando value persistence
	 */
	public void setExpandoValuePersistence(
		ExpandoValuePersistence expandoValuePersistence) {
		this.expandoValuePersistence = expandoValuePersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.liferay.meeting.webex.model.WebExSite",
			webExSiteLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.liferay.meeting.webex.model.WebExSite");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return WebExSiteLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return WebExSite.class;
	}

	protected String getModelClassName() {
		return WebExSite.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = webExSitePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.meeting.webex.service.WebExAccountLocalService.class)
	protected com.liferay.meeting.webex.service.WebExAccountLocalService webExAccountLocalService;
	@BeanReference(type = WebExAccountPersistence.class)
	protected WebExAccountPersistence webExAccountPersistence;
	@BeanReference(type = com.liferay.meeting.webex.service.WebExSiteLocalService.class)
	protected WebExSiteLocalService webExSiteLocalService;
	@BeanReference(type = WebExSitePersistence.class)
	protected WebExSitePersistence webExSitePersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = com.liferay.expando.kernel.service.ExpandoValueLocalService.class)
	protected com.liferay.expando.kernel.service.ExpandoValueLocalService expandoValueLocalService;
	@BeanReference(type = ExpandoValuePersistence.class)
	protected ExpandoValuePersistence expandoValuePersistence;
	private ClassLoader _classLoader;
	private WebExSiteLocalServiceClpInvoker _clpInvoker = new WebExSiteLocalServiceClpInvoker();
}