/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.meeting.webex.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.meeting.webex.model.WebExSite;
import com.liferay.meeting.webex.model.WebExSiteModel;
import com.liferay.meeting.webex.model.WebExSiteSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WebExSite service. Represents a row in the &quot;WebEx_WebExSite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link WebExSiteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WebExSiteImpl}.
 * </p>
 *
 * @author Anant Singh
 * @see WebExSiteImpl
 * @see WebExSite
 * @see WebExSiteModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WebExSiteModelImpl extends BaseModelImpl<WebExSite>
	implements WebExSiteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a web ex site model instance should use the {@link WebExSite} interface instead.
	 */
	public static final String TABLE_NAME = "WebEx_WebExSite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "webExSiteId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "apiURL", Types.VARCHAR },
			{ "login", Types.VARCHAR },
			{ "password_", Types.VARCHAR },
			{ "partnerKey", Types.VARCHAR },
			{ "siteKey", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("webExSiteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apiURL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("login", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partnerKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("siteKey", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table WebEx_WebExSite (uuid_ VARCHAR(75) null,webExSiteId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,apiURL VARCHAR(300) null,login VARCHAR(300) null,password_ VARCHAR(75) null,partnerKey VARCHAR(300) null,siteKey LONG)";
	public static final String TABLE_SQL_DROP = "drop table WebEx_WebExSite";
	public static final String ORDER_BY_JPQL = " ORDER BY webExSite.webExSiteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WebEx_WebExSite.webExSiteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.meeting.webex.model.WebExSite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.meeting.webex.model.WebExSite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.meeting.webex.model.WebExSite"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long SITEKEY_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long WEBEXSITEID_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WebExSite toModel(WebExSiteSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WebExSite model = new WebExSiteImpl();

		model.setUuid(soapModel.getUuid());
		model.setWebExSiteId(soapModel.getWebExSiteId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setApiURL(soapModel.getApiURL());
		model.setLogin(soapModel.getLogin());
		model.setPassword(soapModel.getPassword());
		model.setPartnerKey(soapModel.getPartnerKey());
		model.setSiteKey(soapModel.getSiteKey());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WebExSite> toModels(WebExSiteSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WebExSite> models = new ArrayList<WebExSite>(soapModels.length);

		for (WebExSiteSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.meeting.webex.model.WebExSite"));

	public WebExSiteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _webExSiteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWebExSiteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _webExSiteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WebExSite.class;
	}

	@Override
	public String getModelClassName() {
		return WebExSite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("webExSiteId", getWebExSiteId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("apiURL", getApiURL());
		attributes.put("login", getLogin());
		attributes.put("password", getPassword());
		attributes.put("partnerKey", getPartnerKey());
		attributes.put("siteKey", getSiteKey());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long webExSiteId = (Long)attributes.get("webExSiteId");

		if (webExSiteId != null) {
			setWebExSiteId(webExSiteId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String apiURL = (String)attributes.get("apiURL");

		if (apiURL != null) {
			setApiURL(apiURL);
		}

		String login = (String)attributes.get("login");

		if (login != null) {
			setLogin(login);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		String partnerKey = (String)attributes.get("partnerKey");

		if (partnerKey != null) {
			setPartnerKey(partnerKey);
		}

		Long siteKey = (Long)attributes.get("siteKey");

		if (siteKey != null) {
			setSiteKey(siteKey);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getWebExSiteId() {
		return _webExSiteId;
	}

	@Override
	public void setWebExSiteId(long webExSiteId) {
		_webExSiteId = webExSiteId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getApiURL() {
		if (_apiURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _apiURL;
		}
	}

	@Override
	public void setApiURL(String apiURL) {
		_apiURL = apiURL;
	}

	@JSON
	@Override
	public String getLogin() {
		if (_login == null) {
			return StringPool.BLANK;
		}
		else {
			return _login;
		}
	}

	@Override
	public void setLogin(String login) {
		_login = login;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@JSON
	@Override
	public String getPartnerKey() {
		if (_partnerKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _partnerKey;
		}
	}

	@Override
	public void setPartnerKey(String partnerKey) {
		_partnerKey = partnerKey;
	}

	@JSON
	@Override
	public long getSiteKey() {
		return _siteKey;
	}

	@Override
	public void setSiteKey(long siteKey) {
		_columnBitmask |= SITEKEY_COLUMN_BITMASK;

		if (!_setOriginalSiteKey) {
			_setOriginalSiteKey = true;

			_originalSiteKey = _siteKey;
		}

		_siteKey = siteKey;
	}

	public long getOriginalSiteKey() {
		return _originalSiteKey;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				WebExSite.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WebExSite.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WebExSite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WebExSite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WebExSiteImpl webExSiteImpl = new WebExSiteImpl();

		webExSiteImpl.setUuid(getUuid());
		webExSiteImpl.setWebExSiteId(getWebExSiteId());
		webExSiteImpl.setGroupId(getGroupId());
		webExSiteImpl.setCompanyId(getCompanyId());
		webExSiteImpl.setUserId(getUserId());
		webExSiteImpl.setUserName(getUserName());
		webExSiteImpl.setCreateDate(getCreateDate());
		webExSiteImpl.setModifiedDate(getModifiedDate());
		webExSiteImpl.setName(getName());
		webExSiteImpl.setApiURL(getApiURL());
		webExSiteImpl.setLogin(getLogin());
		webExSiteImpl.setPassword(getPassword());
		webExSiteImpl.setPartnerKey(getPartnerKey());
		webExSiteImpl.setSiteKey(getSiteKey());

		webExSiteImpl.resetOriginalValues();

		return webExSiteImpl;
	}

	@Override
	public int compareTo(WebExSite webExSite) {
		long primaryKey = webExSite.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WebExSite)) {
			return false;
		}

		WebExSite webExSite = (WebExSite)obj;

		long primaryKey = webExSite.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WebExSiteModelImpl webExSiteModelImpl = this;

		webExSiteModelImpl._originalUuid = webExSiteModelImpl._uuid;

		webExSiteModelImpl._originalGroupId = webExSiteModelImpl._groupId;

		webExSiteModelImpl._setOriginalGroupId = false;

		webExSiteModelImpl._originalCompanyId = webExSiteModelImpl._companyId;

		webExSiteModelImpl._setOriginalCompanyId = false;

		webExSiteModelImpl._setModifiedDate = false;

		webExSiteModelImpl._originalSiteKey = webExSiteModelImpl._siteKey;

		webExSiteModelImpl._setOriginalSiteKey = false;

		webExSiteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WebExSite> toCacheModel() {
		WebExSiteCacheModel webExSiteCacheModel = new WebExSiteCacheModel();

		webExSiteCacheModel.uuid = getUuid();

		String uuid = webExSiteCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			webExSiteCacheModel.uuid = null;
		}

		webExSiteCacheModel.webExSiteId = getWebExSiteId();

		webExSiteCacheModel.groupId = getGroupId();

		webExSiteCacheModel.companyId = getCompanyId();

		webExSiteCacheModel.userId = getUserId();

		webExSiteCacheModel.userName = getUserName();

		String userName = webExSiteCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			webExSiteCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			webExSiteCacheModel.createDate = createDate.getTime();
		}
		else {
			webExSiteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			webExSiteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			webExSiteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		webExSiteCacheModel.name = getName();

		String name = webExSiteCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			webExSiteCacheModel.name = null;
		}

		webExSiteCacheModel.apiURL = getApiURL();

		String apiURL = webExSiteCacheModel.apiURL;

		if ((apiURL != null) && (apiURL.length() == 0)) {
			webExSiteCacheModel.apiURL = null;
		}

		webExSiteCacheModel.login = getLogin();

		String login = webExSiteCacheModel.login;

		if ((login != null) && (login.length() == 0)) {
			webExSiteCacheModel.login = null;
		}

		webExSiteCacheModel.password = getPassword();

		String password = webExSiteCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			webExSiteCacheModel.password = null;
		}

		webExSiteCacheModel.partnerKey = getPartnerKey();

		String partnerKey = webExSiteCacheModel.partnerKey;

		if ((partnerKey != null) && (partnerKey.length() == 0)) {
			webExSiteCacheModel.partnerKey = null;
		}

		webExSiteCacheModel.siteKey = getSiteKey();

		return webExSiteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", webExSiteId=");
		sb.append(getWebExSiteId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", apiURL=");
		sb.append(getApiURL());
		sb.append(", login=");
		sb.append(getLogin());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", partnerKey=");
		sb.append(getPartnerKey());
		sb.append(", siteKey=");
		sb.append(getSiteKey());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.liferay.meeting.webex.model.WebExSite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webExSiteId</column-name><column-value><![CDATA[");
		sb.append(getWebExSiteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>apiURL</column-name><column-value><![CDATA[");
		sb.append(getApiURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>login</column-name><column-value><![CDATA[");
		sb.append(getLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>partnerKey</column-name><column-value><![CDATA[");
		sb.append(getPartnerKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>siteKey</column-name><column-value><![CDATA[");
		sb.append(getSiteKey());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = WebExSite.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			WebExSite.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _webExSiteId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _apiURL;
	private String _login;
	private String _password;
	private String _partnerKey;
	private long _siteKey;
	private long _originalSiteKey;
	private boolean _setOriginalSiteKey;
	private long _columnBitmask;
	private WebExSite _escapedModel;
}